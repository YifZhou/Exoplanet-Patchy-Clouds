import numpy as np

def Gaussian2d(size, fwhm = 3, center=None):
    """ Make a square gaussian kernel.

    size is the length of a side of the square
    fwhm is full-width-half-maximum, which
    can be thought of as an effective radius.

    use Gaussian as PSF
    """
 
    x = np.arange(0, size, 1, float)
    y = x[:,np.newaxis]
    
    if center is None:
        x0 = y0 = size // 2
    else:
        x0 = center[0]
        y0 = center[1]
    
    return np.exp(-4*np.log(2) * ((x-x0)**2 + (y-y0)**2) / fwhm**2)
    
class CCD:
    """
    simulate a HST CCD
    """
    def __init__(self, size, nSamp, p2pDiff = 0.05):
        self.size = size
        self.nSamp = nSamp
        intraPixDim1 = np.sin(np.pi/nSamp * np.arange(nSamp))
        intraPixDim2 = intraPixDim1[:, np.newaxis]
        pixel = np.ones([nSamp, nSamp]) * (1 - p2pDiff) + intraPixDim1 * intraPixDim2 * p2pDiff
        self.supCCD = np.tile(pixel, [size, size]) #CCD with fine Structure
        self.supRecord = np.zeros([size*nSamp, size*nSamp]) #super sampled result

    def reset(self):
        """
        reset CCD
        """    
        self.record = np.zeros([self.size, self.size])
        self.supRecord = np.zeros([self.size*self.nSamp, self.size*self.nSamp]) #super sampled result

    def exposure(self, jit, fwhm, amp = 1.0, time = 3.0):
        """
        one exposure, add one gaussian
        jitV2 : jit[0]
        jitV3 : jit[1]
        """
        plateScale = 0.13 #arcsec/pixel
        jitX = (jit[1] * np.cos(45) - jit[0] * np.sin(45))/plateScale
        jitY = (jit[1] * np.cos(45) + jit[0] * np.sin(45))/plateScale
        center = [self.size*self.nSamp//2 + jitY, self.size*self.nSamp //2 + jitX]
        self.supRecord += self.supCCD * Gaussian2d(self.size*self.nSamp, fwhm, center) * amp * time

    def read(self):
        """
        read the record out
        rebin the data
        """
        return self.supRecord.reshape((self.nSamp, self.size, self.nSamp, self.size)).sum(axis = 3).sum(axis = 1)
        
